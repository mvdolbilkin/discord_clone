const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const { sequelize, User, Message } = require('./database');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt'); // –≤–º–µ—Å—Ç–æ bcryptjs

const SECRET_KEY = 'c366fd93a111ccb4fe1c8cb002c7742f6740a0a09aa7b54e215fcea05ed961b381e6b2d3082eb7879429a616a46df67d6ce76d5d647c29c6b989bbb4c04b8d64'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –∫–ª—é—á

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
    cors: {
        origin: '*'
    }
});
const cors = require('cors');
app.use(cors());

app.use(express.json()); // –†–∞–∑–±–∏—Ä–∞–µ–º JSON-–∑–∞–ø—Ä–æ—Å—ã

// üìå **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
app.post('/register', async (req, res) => {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', req.body);

        const { username, password } = req.body;
        if (!username || !password) {
            return res.status(400).json({ message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å' });
        }

        const existingUser = await User.findOne({ where: { username } });
        if (existingUser) {
            return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        console.log('–•–µ—à –ø–∞—Ä–æ–ª—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', hashedPassword);

        const newUser = await User.create({ username, password: hashedPassword });

        res.status(201).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.toString() });
    }
});

// üìå **–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
app.post('/login', async (req, res) => {
    try {
        console.log('–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', req.body);

        const { username, password } = req.body;
        if (!username || !password) {
            return res.status(400).json({ message: '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å' });
        }

        const user = await User.findOne({ where: { username } });
        if (!user) {
            return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        console.log('–•–µ—à –ø–∞—Ä–æ–ª—è –≤ –±–∞–∑–µ:', user.password);
        console.log('–í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å:', password);

        const isValidPassword = await bcrypt.compare(password, user.password);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è:', isValidPassword);

        if (!isValidPassword) {
            return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
        }

        const token = jwt.sign({ id: user.id, username: user.username }, SECRET_KEY, { expiresIn: '1h' });

        res.status(200).json({ message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥', token });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: error.toString() });
    }
});

// üìå **–ú–∏–¥–¥–ª–≤–∞—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤**
const authenticate = (req, res, next) => {
    const token = req.headers.authorization;
    if (!token) {
        return res.status(401).json({ message: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω' });
    }

    try {
        const decoded = jwt.verify(token.split(' ')[1], SECRET_KEY);
        req.user = decoded;
        next();
    } catch (error) {
        res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
};

// üìå **–ó–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç (–ø—Ä–∏–º–µ—Ä)**
app.get('/profile', authenticate, async (req, res) => {
    res.json({ message: `–ü—Ä–∏–≤–µ—Ç, ${req.user.username}! –≠—Ç–æ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.` });
});

// üìå **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSockets**
io.on('connection', (socket) => {
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);

    socket.on('setUsername', async (username) => {
        const user = await User.findOne({ where: { username } });
        if (!user) {
            return;
        }
        socket.username = username;
        io.emit('userConnected', { id: socket.id, username });
    });
// üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
    socket.on('callUser', (data) => {
        console.log(`–ó–≤–æ–Ω–æ–∫ –æ—Ç ${socket.id} –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é`);

        io.emit('incomingCall', { from: socket.id, signal: data.signal });
    });

    // üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞
    socket.on('answerCall', (data) => {
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${socket.id} –ø—Ä–∏–Ω—è–ª –∑–≤–æ–Ω–æ–∫`);

        io.emit('callAccepted', { signal: data.signal });
    });
    socket.on('message', async (data) => {
        const message = await Message.create({ username: socket.username, text: data.text });
        io.emit('message', { username: message.username, text: message.text });
    });

    socket.on('disconnect', () => {
        io.emit('userDisconnected', { id: socket.id, username: socket.username });
    });
});
// üìå **–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞**
const PORT = 8080;
server.listen(PORT, async () => {
    await sequelize.authenticate();
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://85.192.25.173:${PORT}`);
});
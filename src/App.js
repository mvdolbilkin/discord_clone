import React, { useState, useEffect, useRef } from 'react';
import io from 'socket.io-client';

const socket = io('wss://discordclone.duckdns.org', { transports: ['websocket', 'polling'] });

function App() {
    const [inCall, setInCall] = useState(false);
    const [incomingCall, setIncomingCall] = useState(false);
    const [callerSignal, setCallerSignal] = useState(null);
    const myVideo = useRef();
    const userVideo = useRef();
    const peerConnection = useRef(null);
    const iceCandidatesQueue = useRef([]);

    useEffect(() => {
        socket.on('incomingCall', (data) => {
            console.log("üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫", data);
            if (!data.signal || !data.signal.type) {
                console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SDP –ø—Ä–∏ –∑–≤–æ–Ω–∫–µ", data);
                return;
            }
            setIncomingCall(true);
            setCallerSignal(data.signal);
        });

        socket.on('callAccepted', async (data) => {
            console.log("‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º RemoteDescription", data.signal);
            if (peerConnection.current) {
                try {
                    if (!data.signal || !data.signal.type) {
                        console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SDP-—Å–∏–≥–Ω–∞–ª–∞", data.signal);
                        return;
                    }
                    await peerConnection.current.setRemoteDescription(new RTCSessionDescription(data.signal));

                    while (iceCandidatesQueue.current.length > 0) {
                        const candidate = iceCandidatesQueue.current.shift();
                        await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
                    }
                } catch (error) {
                    console.error("‚ùå –û—à–∏–±–∫–∞ setRemoteDescription:", error);
                }
            }
        });

        socket.on('iceCandidate', async (candidate) => {
            console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç", candidate);
            if (peerConnection.current && peerConnection.current.remoteDescription) {
                try {
                    await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
                } catch (error) {
                    console.error("‚ùå –û—à–∏–±–∫–∞ addIceCandidate:", error);
                }
            } else {
                console.log("üü° –û–∂–∏–¥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ RemoteDescription, –¥–æ–±–∞–≤–ª—è–µ–º ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å");
                iceCandidatesQueue.current.push(candidate);
            }
        });

        return () => {
            socket.off('incomingCall');
            socket.off('callAccepted');
            socket.off('iceCandidate');
        };
    }, []);

    const startCall = async () => {
        setInCall(true);
        console.log("üìû –ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞");

        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        myVideo.current.srcObject = stream;

        peerConnection.current = new RTCPeerConnection({
            iceServers: [{ urls: "stun:stun.l.google.com:19302" }]
        });

        stream.getTracks().forEach(track => peerConnection.current.addTrack(track, stream));

        peerConnection.current.ontrack = (event) => {
            console.log("üé• –í–∏–¥–µ–æ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞");
            userVideo.current.srcObject = event.streams[0];
        };

        peerConnection.current.onicecandidate = (event) => {
            if (event.candidate) {
                console.log("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞");
                socket.emit("iceCandidate", event.candidate);
            }
        };

        const offer = await peerConnection.current.createOffer();
        await peerConnection.current.setLocalDescription(offer);
        socket.emit('callUser', { signal: offer });
    };

    const acceptCall = async () => {
        setInCall(true);
        setIncomingCall(false);
        console.log("üìû –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫");

        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        myVideo.current.srcObject = stream;

        peerConnection.current = new RTCPeerConnection({
            iceServers: [{ urls: "stun:stun.l.google.com:19302" }]
        });

        stream.getTracks().forEach(track => peerConnection.current.addTrack(track, stream));

        peerConnection.current.ontrack = (event) => {
            console.log("üé• –í–∏–¥–µ–æ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞");
            userVideo.current.srcObject = event.streams[0];
        };

        peerConnection.current.onicecandidate = (event) => {
            if (event.candidate) {
                console.log("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞");
                socket.emit("iceCandidate", event.candidate);
            }
        };

        if (!callerSignal || !callerSignal.type) {
            console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SDP-—Å–∏–≥–Ω–∞–ª–∞", callerSignal);
            return;
        }

        try {
            await peerConnection.current.setRemoteDescription(new RTCSessionDescription(callerSignal));
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ setRemoteDescription:", error);
            return;
        }

        const answer = await peerConnection.current.createAnswer();
        await peerConnection.current.setLocalDescription(answer);
        socket.emit('answerCall', { signal: answer });

        while (iceCandidatesQueue.current.length > 0) {
            const candidate = iceCandidatesQueue.current.shift();
            await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
        }
    };

    return (
        <div>
            <h1>üìû –í–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏</h1>
            {incomingCall && <button onClick={acceptCall}>–ü—Ä–∏–Ω—è—Ç—å –∑–≤–æ–Ω–æ–∫</button>}
            <button onClick={startCall} disabled={inCall}>–ü–æ–∑–≤–æ–Ω–∏—Ç—å</button>
            <video ref={myVideo} autoPlay playsInline />
            <video ref={userVideo} autoPlay playsInline />
        </div>
    );
}

export default App;
import React, { useState, useEffect } from 'react';
import io from 'socket.io-client';
import { jwtDecode } from 'jwt-decode';

const API_URL = "https://discordclone.duckdns.org";
const token = localStorage.getItem('token');
const socket = io(API_URL, {
    transports: ['websocket', 'polling'],
    auth: { token }
});

function App() {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [users, setUsers] = useState([]); // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const [currentDialog, setCurrentDialog] = useState(null);
    const [messages, setMessages] = useState([]);
    const [message, setMessage] = useState('');
    
    let userId = null;
    if (token) {
      console.log("üìå –¢–æ–∫–µ–Ω –∏–∑ localStorage:", token);

      try {
          const decoded = jwtDecode(token);
          console.log("üìå –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:", decoded);
          userId = decoded.id;
      } catch (error) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:", error);
          localStorage.removeItem('token');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    useEffect(() => {
        if (!token) return;

        fetch(`${API_URL}/check-auth`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` }
        })
        .then(res => res.json())
        .then(data => {
            if (data.success) {
                setIsAuthenticated(true);
                fetchUsers();
            } else {
                localStorage.removeItem('token');
                setIsAuthenticated(false);
            }
        })
        .catch(() => {
            localStorage.removeItem('token');
            setIsAuthenticated(false);
        });
    }, [token]);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const fetchUsers = () => {
        fetch(`${API_URL}/users`)
            .then(res => res.json())
            .then(data => {
                console.log("üìå –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", data);
                setUsers(data.filter(user => user.id !== userId)); // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è
            })
            .catch(err => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", err));
    };

    // –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
    const startChat = async (otherUserId) => {
        try {
            const response = await fetch(`${API_URL}/dialogs`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ user1Id: userId, user2Id: otherUserId })
            });

            const data = await response.json();
            console.log("üìå –û—Ç–∫—Ä—ã—Ç –¥–∏–∞–ª–æ–≥ ID:", data.dialogId);
            setCurrentDialog(data.dialogId);

            socket.emit('joinDialog', data.dialogId);
            fetch(`${API_URL}/dialogs/${data.dialogId}/messages`)
                .then(res => res.json())
                .then(data => setMessages(data));
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞:", error);
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π WebSocket
    useEffect(() => {
        socket.on('privateMessage', (data) => {
            setMessages(prev => [...prev, data]);
        });

        return () => {
            socket.off('privateMessage');
        };
    }, []);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sendMessage = () => {
        if (message.trim() && currentDialog) {
            socket.emit('privateMessage', { dialogId: currentDialog, text: message });
            setMessage('');
        }
    };

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const register = async () => {
        const response = await fetch(`${API_URL}/register`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ username, password }),
        });
        const data = await response.json();
        alert(data.message);
    };

    // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    const login = async () => {
        const response = await fetch(`${API_URL}/login`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ username, password }),
        });
        const data = await response.json();
        if (data.token) {
            localStorage.setItem('token', data.token);
            setIsAuthenticated(true);
            fetchUsers();
        } else {
            alert(data.message);
        }
    };

    // –í—ã—Ö–æ–¥
    const logout = () => {
        localStorage.removeItem('token');
        setIsAuthenticated(false);
    };

    return (
        <div style={{ display: 'flex', height: '100vh' }}>
            {!isAuthenticated ? (
                <div>
                    <h2>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –í—Ö–æ–¥</h2>
                    <input placeholder="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" value={username} onChange={(e) => setUsername(e.target.value)} />
                    <input type="password" placeholder="–ü–∞—Ä–æ–ª—å" value={password} onChange={(e) => setPassword(e.target.value)} />
                    <button onClick={register}>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</button>
                    <button onClick={login}>–í—Ö–æ–¥</button>
                </div>
            ) : (
                <>
                    {/* –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–ª–µ–≤–∞ */}
                    <div style={{ width: '30%', borderRight: '1px solid gray', padding: '10px' }}>
                        <h3>üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h3>
                        <ul>
                            {users.length > 0 ? (
                                users.map(user => (
                                    <li key={user.id} onClick={() => startChat(user.id)}>
                                        {user.username}
                                    </li>
                                ))
                            ) : (
                                <p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
                            )}
                        </ul>
                        <button onClick={logout} style={{ marginTop: '10px' }}>–í—ã–π—Ç–∏</button>
                    </div>

                    {/* –ß–∞—Ç —Å–ø—Ä–∞–≤–∞ */}
                    <div style={{ width: '70%', padding: '10px' }}>
                        {currentDialog ? (
                            <>
                                <h3>üí¨ –î–∏–∞–ª–æ–≥ #{currentDialog}</h3>
                                <div style={{ border: '1px solid gray', height: '400px', overflowY: 'scroll', padding: '10px' }}>
                                    {messages.map((msg, index) => (
                                        <p key={index}><strong>{msg.username}:</strong> {msg.text}</p>
                                    ))}
                                </div>
                                <input
                                    type="text"
                                    value={message}
                                    onChange={(e) => setMessage(e.target.value)}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                                />
                                <button onClick={sendMessage}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                            </>
                        ) : (
                            <p>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —á–∞—Ç–∞</p>
                        )}
                    </div>
                </>
            )}
        </div>
    );
}

export default App;
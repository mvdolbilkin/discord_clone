import React, { useState, useEffect, useRef } from 'react';
import io from 'socket.io-client';

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É WebSocket
const socket = io('wss://discordclone.duckdns.org', { transports: ['websocket', 'polling'] });

function App() {
    const [username, setUsername] = useState('');
    const [password, setPassword] = useState('');
    const [token, setToken] = useState(localStorage.getItem('token') || '');
    const [messages, setMessages] = useState([]);
    const [message, setMessage] = useState('');
    const [inCall, setInCall] = useState(false);
    const [incomingCall, setIncomingCall] = useState(false);
    const [callerSignal, setCallerSignal] = useState(null);
    const myVideo = useRef();
    const userVideo = useRef();
    const peerConnection = useRef(null);
    const iceCandidatesQueue = useRef([]);

    useEffect(() => {
        if (token) {
            socket.on('loadMessages', (msgs) => setMessages(msgs));
            socket.on('message', (data) => setMessages((prev) => [...prev, data]));

            socket.on('incomingCall', (data) => {
                console.log("üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫", data);
                setIncomingCall(true);
                setCallerSignal(data.signal);
            });

            socket.on('callAccepted', async (signal) => {
                console.log("‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º RemoteDescription", signal);
                if (peerConnection.current) {
                    try {
                        if (!signal || !signal.type) {
                            console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SDP-—Å–∏–≥–Ω–∞–ª–∞");
                            return;
                        }
                        await peerConnection.current.setRemoteDescription(new RTCSessionDescription(signal));

                        // üîπ –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç—ã
                        while (iceCandidatesQueue.current.length > 0) {
                            const candidate = iceCandidatesQueue.current.shift();
                            await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
                        }
                    } catch (error) {
                        console.error("‚ùå –û—à–∏–±–∫–∞ setRemoteDescription:", error);
                    }
                }
            });

            socket.on('iceCandidate', async (candidate) => {
                console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç", candidate);
                if (peerConnection.current && peerConnection.current.remoteDescription) {
                    try {
                        await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
                    } catch (error) {
                        console.error("‚ùå –û—à–∏–±–∫–∞ addIceCandidate:", error);
                    }
                } else {
                    console.log("üü° –û–∂–∏–¥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ RemoteDescription, –¥–æ–±–∞–≤–ª—è–µ–º ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç –≤ –æ—á–µ—Ä–µ–¥—å");
                    iceCandidatesQueue.current.push(candidate);
                }
            });

            return () => {
                socket.off('message');
                socket.off('loadMessages');
                socket.off('incomingCall');
                socket.off('callAccepted');
                socket.off('iceCandidate');
            };
        }
    }, [token]);

    const sendMessage = () => {
        if (message.trim()) {
            socket.emit('message', { text: message });
            setMessage('');
        }
    };

    const startCall = async () => {
        setInCall(true);
        console.log("üìû –ù–∞—á–∞–ª–æ –∑–≤–æ–Ω–∫–∞");

        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        myVideo.current.srcObject = stream;

        peerConnection.current = new RTCPeerConnection({
            iceServers: [{ urls: "stun:stun.l.google.com:19302" }]
        });

        stream.getTracks().forEach(track => peerConnection.current.addTrack(track, stream));

        peerConnection.current.ontrack = (event) => {
            console.log("üé• –í–∏–¥–µ–æ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞");
            userVideo.current.srcObject = event.streams[0];
        };

        peerConnection.current.onicecandidate = (event) => {
            if (event.candidate) {
                console.log("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞");
                socket.emit("iceCandidate", event.candidate);
            }
        };

        const offer = await peerConnection.current.createOffer();
        await peerConnection.current.setLocalDescription(offer);
        socket.emit('callUser', { signal: offer });
    };

    const acceptCall = async () => {
        setInCall(true);
        setIncomingCall(false);
        console.log("üìû –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫");

        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
        myVideo.current.srcObject = stream;

        peerConnection.current = new RTCPeerConnection({
            iceServers: [{ urls: "stun:stun.l.google.com:19302" }]
        });

        stream.getTracks().forEach(track => peerConnection.current.addTrack(track, stream));

        peerConnection.current.ontrack = (event) => {
            console.log("üé• –í–∏–¥–µ–æ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞");
            userVideo.current.srcObject = event.streams[0];
        };

        peerConnection.current.onicecandidate = (event) => {
            if (event.candidate) {
                console.log("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç–∞");
                socket.emit("iceCandidate", event.candidate);
            }
        };

        if (!callerSignal || !callerSignal.type) {
            console.error("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SDP-—Å–∏–≥–Ω–∞–ª–∞", callerSignal);
            return;
        }

        try {
            await peerConnection.current.setRemoteDescription(new RTCSessionDescription(callerSignal));
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ setRemoteDescription:", error);
            return;
        }

        const answer = await peerConnection.current.createAnswer();
        await peerConnection.current.setLocalDescription(answer);
        socket.emit('answerCall', { signal: answer });

        // üîπ –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ ICE-–∫–∞–Ω–¥–∏–¥–∞—Ç—ã
        while (iceCandidatesQueue.current.length > 0) {
            const candidate = iceCandidatesQueue.current.shift();
            await peerConnection.current.addIceCandidate(new RTCIceCandidate(candidate));
        }
    };

    return (
        <div>
            <h1>–ß–∞—Ç + –í–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏</h1>

            {!token ? (
                <div>
                    <input type="text" placeholder="–õ–æ–≥–∏–Ω" value={username} onChange={(e) => setUsername(e.target.value)} />
                    <input type="password" placeholder="–ü–∞—Ä–æ–ª—å" value={password} onChange={(e) => setPassword(e.target.value)} />
                    <button onClick={() => alert("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞")}>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</button>
                    <button onClick={() => alert("–í—Ö–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")}>–í—Ö–æ–¥</button>
                </div>
            ) : (
                <>
                    <div>
                        <h2>üí¨ –ß–∞—Ç</h2>
                        <div>
                            {messages.map((msg, index) => (
                                <p key={index}><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {msg.text}</p>
                            ))}
                        </div>
                        <input type="text" value={message} onChange={(e) => setMessage(e.target.value)} placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" />
                        <button onClick={sendMessage}>–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
                    </div>

                    {incomingCall && (
                        <div>
                            <p>üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫...</p>
                            <button onClick={acceptCall}>–ü—Ä–∏–Ω—è—Ç—å</button>
                        </div>
                    )}

                    <button onClick={startCall} disabled={inCall}>–ü–æ–∑–≤–æ–Ω–∏—Ç—å</button>

                    <div>
                        <h2>üìπ –í–∞—à–µ –≤–∏–¥–µ–æ</h2>
                        <video ref={myVideo} autoPlay playsInline style={{ width: '300px', border: '1px solid black' }} />

                        <h2>üìπ –í–∏–¥–µ–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞</h2>
                        <video ref={userVideo} autoPlay playsInline style={{ width: '300px', border: '1px solid red' }} />
                    </div>
                </>
            )}
        </div>
    );
}

export default App;